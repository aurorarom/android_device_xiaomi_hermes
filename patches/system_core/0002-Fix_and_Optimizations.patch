From 79e1326b20b43d532ff282f2a594079497d47f23 Mon Sep 17 00:00:00 2001
From: Dan Albert <danalbert@google.com>
Date: Mon, 8 Sep 2014 19:09:41 -0700
Subject: [PATCH] Fix some clang compilation issues.

Use expected inline behavior with clang.

GCC defaults to -std=gnu90, giving C89 inline semantics with GNU
extensions. Clang defaults to C99. Explicitly use gnu90.

Mark an unused parameter as __unused.

Fix some incorrect casts.

Change-Id: I05b95585d5e3688eda71769b63b6b8a9237bcaf4
---
 fastbootd/vendor_trigger_default.c        | 2 +-
 libcutils/Android.mk                      | 2 +-
 libpixelflinger/codeflinger/CodeCache.cpp | 4 ++--
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/fastbootd/vendor_trigger_default.c b/fastbootd/vendor_trigger_default.c
index 3627024..0bcc99b 100644
--- a/fastbootd/vendor_trigger_default.c
+++ b/fastbootd/vendor_trigger_default.c
@@ -52,7 +52,7 @@ int trigger_gpt_layout(struct GPT_content *table) {
     return 0;
 }
 
-int trigger_oem_cmd(const char *arg, const char **response) {
+int trigger_oem_cmd(const char *arg, const char **response __unused) {
     KLOG_DEBUG("fastbootd", "%s: %s", __func__, arg);
     return 0;
 }
diff --git a/libcutils/Android.mk b/libcutils/Android.mk
index bee2bd7..e050094 100644
--- a/libcutils/Android.mk
+++ b/libcutils/Android.mk
@@ -151,7 +151,7 @@ endif
 
 LOCAL_C_INCLUDES := $(libcutils_c_includes)
 LOCAL_STATIC_LIBRARIES := liblog
-LOCAL_CFLAGS += $(targetSmpFlag) -Werror
+LOCAL_CFLAGS += $(targetSmpFlag) -Werror -std=gnu90
 LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
 include $(BUILD_STATIC_LIBRARY)
 
diff --git a/libpixelflinger/codeflinger/CodeCache.cpp b/libpixelflinger/codeflinger/CodeCache.cpp
index cfd2b37..d770302 100644
--- a/libpixelflinger/codeflinger/CodeCache.cpp
+++ b/libpixelflinger/codeflinger/CodeCache.cpp
@@ -201,8 +201,8 @@ int CodeCache::cache(  const AssemblyKeyBase& keyBase,
         mCacheInUse += assemblySize;
         mWhen++;
         // synchronize caches...
-        void* base = assembly->base();
-        void* curr = (uint8_t*)base + assembly->size();
+        char* base = reinterpret_cast<char*>(assembly->base());
+        char* curr = reinterpret_cast<char*>(base + assembly->size());
         __builtin___clear_cache(base, curr);
     }
 
-- 
2.5.0

From 3d70955045a178fb6dac70803541fa9f559f5210 Mon Sep 17 00:00:00 2001
From: Chih-Hung Hsieh <chh@google.com>
Date: Mon, 6 Oct 2014 13:27:20 -0700
Subject: [PATCH] Add -no-integrated-as at local level.

Later we will enable integrated-as as default at the global level.

BUG: 17820427
Change-Id: I1beed3e75d074d970fa9112ec1c0f0df3d43947a
---
 libcutils/Android.mk                                       | 3 +++
 libpixelflinger/Android.mk                                 | 8 ++++++++
 libpixelflinger/tests/arch-arm64/assembler/Android.mk      | 3 +++
 libpixelflinger/tests/arch-arm64/col32cb16blend/Android.mk | 2 ++
 libpixelflinger/tests/arch-arm64/t32cb16blend/Android.mk   | 2 ++
 5 files changed, 18 insertions(+)

diff --git a/libcutils/Android.mk b/libcutils/Android.mk
index e050094..396db2a 100644
--- a/libcutils/Android.mk
+++ b/libcutils/Android.mk
@@ -121,6 +121,9 @@ LOCAL_SRC_FILES := $(commonSources) \
 LOCAL_SRC_FILES_arm += \
         arch-arm/memset32.S \
 
+# arch-arm/memset32.S does not compile with Clang.
+LOCAL_CLANG_ASFLAGS_arm += -no-integrated-as
+
 LOCAL_SRC_FILES_arm64 += \
         arch-arm64/android_memset.S \
 
diff --git a/libpixelflinger/Android.mk b/libpixelflinger/Android.mk
index 8a427b3..f12e12d 100644
--- a/libpixelflinger/Android.mk
+++ b/libpixelflinger/Android.mk
@@ -66,6 +66,10 @@ ifneq ($(BUILD_TINY_ANDROID),true)
 LOCAL_SHARED_LIBRARIES += libhardware_legacy
 LOCAL_CFLAGS += -DWITH_LIB_HARDWARE
 endif
+# t32cb16blend.S does not compile with Clang.
+LOCAL_CLANG_ASFLAGS_arm += -no-integrated-as
+# arch-arm64/col32cb16blend.S does not compile with Clang.
+LOCAL_CLANG_ASFLAGS_arm64 += -no-integrated-as
 include $(BUILD_SHARED_LIBRARY)
 
 #
@@ -79,6 +83,10 @@ LOCAL_SRC_FILES_arm := $(PIXELFLINGER_SRC_FILES_arm)
 LOCAL_SRC_FILES_arm64 := $(PIXELFLINGER_SRC_FILES_arm64)
 LOCAL_SRC_FILES_mips := $(PIXELFLINGER_SRC_FILES_mips)
 LOCAL_CFLAGS := $(PIXELFLINGER_CFLAGS)
+# t32cb16blend.S does not compile with Clang.
+LOCAL_CLANG_ASFLAGS_arm += -no-integrated-as
+# arch-arm64/col32cb16blend.S does not compile with Clang.
+LOCAL_CLANG_ASFLAGS_arm64 += -no-integrated-as
 include $(BUILD_STATIC_LIBRARY)
 
 
diff --git a/libpixelflinger/tests/arch-arm64/assembler/Android.mk b/libpixelflinger/tests/arch-arm64/assembler/Android.mk
index eca36ef..961f323 100644
--- a/libpixelflinger/tests/arch-arm64/assembler/Android.mk
+++ b/libpixelflinger/tests/arch-arm64/assembler/Android.mk
@@ -5,6 +5,9 @@ LOCAL_SRC_FILES:= \
     arm64_assembler_test.cpp\
     asm_test_jacket.S
 
+# asm_test_jacket.S does not compile with Clang.
+LOCAL_CLANG_ASFLAGS_arm64 += -no-integrated-as
+
 LOCAL_SHARED_LIBRARIES := \
     libcutils \
     libpixelflinger
diff --git a/libpixelflinger/tests/arch-arm64/col32cb16blend/Android.mk b/libpixelflinger/tests/arch-arm64/col32cb16blend/Android.mk
index 3368eb0..5d69203 100644
--- a/libpixelflinger/tests/arch-arm64/col32cb16blend/Android.mk
+++ b/libpixelflinger/tests/arch-arm64/col32cb16blend/Android.mk
@@ -5,6 +5,8 @@ LOCAL_SRC_FILES:= \
     col32cb16blend_test.c \
     ../../../arch-arm64/col32cb16blend.S
 
+LOCAL_CLANG_ASFLAGS_arm64 += -no-integrated-as
+
 LOCAL_SHARED_LIBRARIES :=
 
 LOCAL_C_INCLUDES :=
diff --git a/libpixelflinger/tests/arch-arm64/t32cb16blend/Android.mk b/libpixelflinger/tests/arch-arm64/t32cb16blend/Android.mk
index 8e5ec5e..2c1379b 100644
--- a/libpixelflinger/tests/arch-arm64/t32cb16blend/Android.mk
+++ b/libpixelflinger/tests/arch-arm64/t32cb16blend/Android.mk
@@ -5,6 +5,8 @@ LOCAL_SRC_FILES:= \
     t32cb16blend_test.c \
     ../../../arch-arm64/t32cb16blend.S
 
+LOCAL_CLANG_ASFLAGS_arm64 += -no-integrated-as
+
 LOCAL_SHARED_LIBRARIES :=
 
 LOCAL_C_INCLUDES :=
-- 
2.5.0

From 63ca8a535cfc379ede22efcce9150824a2092067 Mon Sep 17 00:00:00 2001
From: Chih-Hung Hsieh <chh@google.com>
Date: Thu, 23 Oct 2014 15:25:28 -0700
Subject: [PATCH] Fix type cast error, should be char* not void*.

BUG: 18106835
Change-Id: Ic0051d5035e5684de0091cd3528d65e1b1e57161
---
 libpixelflinger/tests/arch-arm64/assembler/arm64_assembler_test.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/libpixelflinger/tests/arch-arm64/assembler/arm64_assembler_test.cpp b/libpixelflinger/tests/arch-arm64/assembler/arm64_assembler_test.cpp
index 456be58..fd96f7e 100644
--- a/libpixelflinger/tests/arch-arm64/assembler/arm64_assembler_test.cpp
+++ b/libpixelflinger/tests/arch-arm64/assembler/arm64_assembler_test.cpp
@@ -409,7 +409,7 @@ void flushcache()
 {
     const long base = long(instrMem);
     const long curr = base + long(instrMemSize);
-    __builtin___clear_cache((void*)base, (void*)curr);
+    __builtin___clear_cache((char*)base, (char*)curr);
 }
 void dataOpTest(dataOpTest_t test, ARMAssemblerInterface *a64asm, uint32_t Rd = 0,
                 uint32_t Rn = 1, uint32_t Rm = 2, uint32_t Rs = 3)
-- 
2.5.0

From 3fbb5fbc6eb3415c7f1c2b8103759c202bfc3e7e Mon Sep 17 00:00:00 2001
From: Elliott Hughes <enh@google.com>
Date: Fri, 9 Jan 2015 16:16:53 -0800
Subject: [PATCH] Linux always has POSIX clocks available.

pixelflinger doesn't have to run on the Mac, but the Condition
code might.

Change-Id: Ib4e9b4daa6e848ffd5742959427b172d45f08e3c
---
 include/utils/Condition.h        | 6 +++---
 libpixelflinger/pixelflinger.cpp | 8 --------
 2 files changed, 3 insertions(+), 11 deletions(-)

diff --git a/include/utils/Condition.h b/include/utils/Condition.h
index 1c99d1a..db9be59 100644
--- a/include/utils/Condition.h
+++ b/include/utils/Condition.h
@@ -113,15 +113,15 @@ inline status_t Condition::waitRelative(Mutex& mutex, nsecs_t reltime) {
     return -pthread_cond_timedwait_relative_np(&mCond, &mutex.mMutex, &ts);
 #else // HAVE_PTHREAD_COND_TIMEDWAIT_RELATIVE
     struct timespec ts;
-#if defined(HAVE_POSIX_CLOCKS)
+#if defined(__linux__)
     clock_gettime(CLOCK_REALTIME, &ts);
-#else // HAVE_POSIX_CLOCKS
+#else // __APPLE__
     // we don't support the clocks here.
     struct timeval t;
     gettimeofday(&t, NULL);
     ts.tv_sec = t.tv_sec;
     ts.tv_nsec= t.tv_usec*1000;
-#endif // HAVE_POSIX_CLOCKS
+#endif
     ts.tv_sec += reltime/1000000000;
     ts.tv_nsec+= reltime%1000000000;
     if (ts.tv_nsec >= 1000000000) {
diff --git a/libpixelflinger/pixelflinger.cpp b/libpixelflinger/pixelflinger.cpp
index ea5bc8e..fd449b2 100644
--- a/libpixelflinger/pixelflinger.cpp
+++ b/libpixelflinger/pixelflinger.cpp
@@ -727,18 +727,10 @@ void ggl_enable_texture2d(context_t* c, int enable)
 
 int64_t ggl_system_time()
 {
-#if defined(HAVE_POSIX_CLOCKS)
     struct timespec t;
     t.tv_sec = t.tv_nsec = 0;
     clock_gettime(CLOCK_THREAD_CPUTIME_ID, &t);
     return int64_t(t.tv_sec)*1000000000LL + t.tv_nsec;
-#else
-    // we don't support the clocks here.
-    struct timeval t;
-    t.tv_sec = t.tv_usec = 0;
-    gettimeofday(&t, NULL);
-    return int64_t(t.tv_sec)*1000000000LL + int64_t(t.tv_usec)*1000LL;
-#endif
 }
 
 // ----------------------------------------------------------------------------
-- 
2.5.0

From 21f6bf8ca6e0d34dfce19751d8358baa56079d4c Mon Sep 17 00:00:00 2001
From: Dan Albert <danalbert@google.com>
Date: Thu, 20 Nov 2014 10:47:55 -0800
Subject: [PATCH] Add a pre-C++11 constexpr compatibility macro.

Needed for cases where something should be constexpr if possible, but
not being constexpr is fine if in pre-C++11 code (such as a const
static float member variable).

Bug: 18466763
Change-Id: I635d062575ba2fbc4cbe3a89f730128c404d95e1
Signed-off-by: arter97 <qkrwngud825@gmail.com>
---
 include/utils/Compat.h | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/include/utils/Compat.h b/include/utils/Compat.h
index fb7748e..eb8fa46 100644
--- a/include/utils/Compat.h
+++ b/include/utils/Compat.h
@@ -48,6 +48,17 @@ static inline ssize_t pread64(int fd, void* buf, size_t nbytes, off64_t offset)
 #endif
 
 /*
+ * Needed for cases where something should be constexpr if possible, but not
+ * being constexpr is fine if in pre-C++11 code (such as a const static float
+ * member variable).
+ */
+#if __cplusplus >= 201103L
+#define CONSTEXPR constexpr
+#else
+#define CONSTEXPR
+#endif
+
+/*
  * TEMP_FAILURE_RETRY is defined by some, but not all, versions of
  * <unistd.h>. (Alas, it is not as standard as we'd hoped!) So, if it's
  * not already defined, then define it here.
-- 
2.5.0

From 24c2fa10d414c76542083378de0718f3d551dc4f Mon Sep 17 00:00:00 2001
From: Eric Miao <emiao@nvidia.com>
Date: Sun, 12 Apr 2015 16:31:46 -0700
Subject: [PATCH] libsparse: fix crc chunk parsing in simg_dump.py

Change-Id: Ia5b7cedd88809b0e421a056704d25afa190470b8
---
 libsparse/simg_dump.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/libsparse/simg_dump.py b/libsparse/simg_dump.py
index 6ece31d..c70d45f 100755
--- a/libsparse/simg_dump.py
+++ b/libsparse/simg_dump.py
@@ -135,7 +135,7 @@ def main():
           break;
         else:
           crc_bin = FH.read(4)
-          crc = struct.unpack("<I", crc)
+          crc = struct.unpack("<I", crc_bin)
           print("Unverified CRC32 0x%08X" % (crc))
       else:
           print("Unknown chunk type 0x%04X" % (chunk_type), end="")
-- 
2.5.0

From ecec6bb92869099c1bbe5744480d6e9ea2137633 Mon Sep 17 00:00:00 2001
From: fsheng <fsheng@codeaurora.org>
Date: Thu, 22 May 2014 19:25:19 +0800
Subject: [PATCH] healthd: Disable the RTC wakeup timer

The timer is used here to avoid battery drained to zero. But the periodic
wakeup during suspend should not be needed as MSM PMIC already support
that by trigger interrupt to avoid the critical low battery situation.
This will save more power. And if the design is not support HW interrupt
of low battery, need to enable the timer to periodic check.

Change-Id: I040b4bc8548dc59b5e7cacb9a5a8a3557604f458
---
 healthd/healthd.cpp | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/healthd/healthd.cpp b/healthd/healthd.cpp
index e172e25..5a2a066 100644
--- a/healthd/healthd.cpp
+++ b/healthd/healthd.cpp
@@ -38,13 +38,12 @@
 using namespace android;
 
 // Periodic chores intervals in seconds
-#ifdef QCOM_HARDWARE
 #define DEFAULT_PERIODIC_CHORES_INTERVAL_FAST (60 * 10)
+#ifdef QCOM_HARDWARE
 //For the designs without low battery detection,need to enable
 //the default 60*10s wakeup timer to periodic check.
 #define DEFAULT_PERIODIC_CHORES_INTERVAL_SLOW -1
 #else
-#define DEFAULT_PERIODIC_CHORES_INTERVAL_FAST (60 * 1)
 #define DEFAULT_PERIODIC_CHORES_INTERVAL_SLOW (60 * 10)
 #endif
 
-- 
2.5.0

From 8ba774511078d4579310c84e3c6afbaeb577229d Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Wed, 11 Nov 2015 19:39:31 +0100
Subject: [PATCH] Add missing function for thermal

---
 include/netutils/ifc.h  | 2 ++
 libnetutils/ifc_utils.c | 5 +++++
 2 files changed, 7 insertions(+)

diff --git a/include/netutils/ifc.h b/include/netutils/ifc.h
index 3b27234..b7d681a 100644
--- a/include/netutils/ifc.h
+++ b/include/netutils/ifc.h
@@ -61,6 +61,8 @@ extern int ifc_configure(const char *ifname, in_addr_t address,
 
 extern in_addr_t prefixLengthToIpv4Netmask(int prefix_length);
 
+extern int ifc_set_throttle(const char *ifname, int rxKbps, int txKbps);
+
 __END_DECLS
 
 #endif /* _NETUTILS_IFC_H_ */
diff --git a/libnetutils/ifc_utils.c b/libnetutils/ifc_utils.c
index cb3722d..e6e9bcd 100644
--- a/libnetutils/ifc_utils.c
+++ b/libnetutils/ifc_utils.c
@@ -711,3 +711,8 @@ ifc_configure(const char *ifname,
 
     return 0;
 }
+
+int ifc_set_throttle(const char *ifname, int rxKbps, int txKbps) {
+    ALOGD("ifc_set_throttle: ifname=%s, rxKbps=%d, txKbps=%d", ifname, rxKbps, txKbps);
+    return 0;
+}
-- 
2.5.0

From 7246edab27e624c7d9ba6706ff4cd8fc61dc25b3 Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Thu, 10 Sep 2015 13:43:55 +0200
Subject: [PATCH] Fix led permissions (by hyperion70)

---
 rootdir/init.rc | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/rootdir/init.rc b/rootdir/init.rc
index a7dc8ae..542eaa9 100644
--- a/rootdir/init.rc
+++ b/rootdir/init.rc
@@ -408,6 +408,9 @@ on boot
     chown system system /sys/class/leds/red/device/grpfreq
     chown system system /sys/class/leds/red/device/grppwm
     chown system system /sys/class/leds/red/device/blink
+    chown system system /sys/class/leds/red/trigger
+    chown system system /sys/class/leds/green/trigger
+    chown system system /sys/class/leds/blue/trigger
     chown system system /sys/class/timed_output/vibrator/enable
     chown system system /sys/module/sco/parameters/disable_esco
     chown system system /sys/kernel/ipv4/tcp_wmem_min
-- 
2.5.0

